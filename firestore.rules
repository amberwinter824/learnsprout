rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if request is from service account
    function isServiceAccount() {
      return request.auth != null && 
        request.auth.token.email == 'firebase-adminsdk-xxxxx@learnsprout.iam.gserviceaccount.com';
    }

    // Allow admin and service account full access to all collections
    match /{document=**} {
      allow read, write: if isAdmin() || isServiceAccount();
    }

    // Existing rules for other users
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    match /children/{childId} {
      allow read: if request.auth != null && (
        resource.data.parentId == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
      allow create: if request.auth != null && (
        request.resource.data.parentId == request.auth.uid ||
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
      allow update: if request.auth != null && (
        resource.data.parentId == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if request.auth != null && (
        resource.data.parentId == request.auth.uid ||
        resource.data.userId == request.auth.uid ||
        resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
    }

    match /observations/{observationId} {
      allow read: if request.auth != null && (
        resource.data.parentId == request.auth.uid ||
        resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
      allow create: if request.auth != null && (
        request.resource.data.parentId == request.auth.uid ||
        request.resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
      allow update: if request.auth != null && (
        resource.data.parentId == request.auth.uid ||
        resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
      allow delete: if request.auth != null && (
        resource.data.parentId == request.auth.uid ||
        resource.data.educatorId == request.auth.uid ||
        isAdmin()
      );
    }

    // ===== Basic Helper Functions =====
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // ===== Role-based Access Control =====
    function hasRole(role) {
      return isSignedIn() && 
             ((request.auth.token.role == role) || 
              (role == 'parent' && request.auth.token.role == 'educator') ||
              (role == 'parent' && request.auth.token.role == 'specialist') ||
              (request.auth.token.role == 'admin'));
    }
    
    // ===== Family-related Helper Functions =====
    function isFamilyMember(userId) {
      return isSignedIn() && (
        // User is accessing their own document
        request.auth.uid == userId ||
        // User is in the same family as the target user
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         exists(/databases/$(database)/documents/users/$(userId)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == 
         get(/databases/$(database)/documents/users/$(userId)).data.familyId)
      );
    }
    
    function getFamilyForChild(childId) {
      return get(/databases/$(database)/documents/children/$(childId)).data.familyId;
    }
    
    function hasFamilyAccess(childId) {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/children/$(childId)) &&
             (get(/databases/$(database)/documents/children/$(childId)).data.familyId != null) &&
             (isFamilyMember(getFamilyForChild(childId)) ||
              (get(/databases/$(database)/documents/children/$(childId)).data.accessList != null &&
               request.auth.uid in get(/databases/$(database)/documents/children/$(childId)).data.accessList));
    }
    
    // ===== Traditional Parent-Child Access Helper Functions =====
    function hasUserAccess(data) {
      return isSignedIn() && 
             (data.userId == request.auth.uid || 
              data.parentId == request.auth.uid ||
              hasRole('educator') || 
              hasRole('admin'));
    }
    
    function hasChildAccess(childId) {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/children/$(childId)) && 
             (get(/databases/$(database)/documents/children/$(childId)).data.userId == request.auth.uid ||
              hasFamilyAccess(childId) ||
              hasRole('educator') || 
              hasRole('admin'));
    }
    
    function isChildData(data) {
      return data.keys().hasAll(['childId']) && hasChildAccess(data.childId);
    }
    
    // ===== Family Rules =====
    match /families/{familyId} {
      allow read: if isSignedIn() && (
        // User is a member of the family
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId ||
        hasRole('admin')
      );
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (
        // User is a member of the family
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId ||
        hasRole('admin')
      );
      allow delete: if false;
    }
    
    // ===== Family Invitations Rules =====
    match /familyInvitations/{invitationId} {
      allow read: if (
        // Allow reading by invite code (for signup)
        request.query.limit == 1 &&
        request.query.filters.size() == 2 &&
        request.query.filters[0].field == 'inviteCode' &&
        request.query.filters[1].field == 'status' &&
        request.query.filters[1].value == 'pending' ||
        // User is the recipient of the invitation
        (isSignedIn() && resource.data.recipientEmail == request.auth.token.email) ||
        // User is a member of the family
        (isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == resource.data.familyId) ||
        hasRole('admin')
      );
      allow create: if isSignedIn() && (
        // User is a member of the family
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        exists(/databases/$(database)/documents/families/$(request.resource.data.familyId)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == request.resource.data.familyId
      );
      allow update: if isSignedIn() && (
        // User is the recipient of the invitation
        resource.data.recipientEmail == request.auth.token.email ||
        hasRole('admin')
      );
      allow delete: if isSignedIn() && (
        // User is the recipient of the invitation
        resource.data.recipientEmail == request.auth.token.email ||
        // User is a member of the family
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         exists(/databases/$(database)/documents/families/$(resource.data.familyId)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == resource.data.familyId) ||
        hasRole('admin')
      );
    }
    
    // ===== Child Skills Rules =====
    match /childSkills/{skillId} {
      allow read: if isSignedIn() && (
        resource == null || 
        isChildData(resource.data) || 
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow create: if isSignedIn() && (
        // Allow creating skills for a new child
        (request.resource.data.keys().hasAll(['childId', 'skillId', 'status']) &&
         exists(/databases/$(database)/documents/children/$(request.resource.data.childId)) &&
         get(/databases/$(database)/documents/children/$(request.resource.data.childId)).data.userId == request.auth.uid) ||
        // Or if they have educator/admin role
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow update: if isSignedIn() && (
        // Allow updating skills for an existing child
        (request.resource.data.keys().hasAll(['childId', 'skillId', 'status']) &&
         exists(/databases/$(database)/documents/children/$(request.resource.data.childId)) &&
         get(/databases/$(database)/documents/children/$(request.resource.data.childId)).data.userId == request.auth.uid) ||
        // Or if they have educator/admin role
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow delete: if isSignedIn() && (
        // Allow deleting skills for an existing child
        (resource.data.childId != null &&
         exists(/databases/$(database)/documents/children/$(resource.data.childId)) &&
         get(/databases/$(database)/documents/children/$(resource.data.childId)).data.userId == request.auth.uid) ||
        // Or if they have admin role
        hasRole('admin')
      );
    }
    
    // ===== Developmental Skills Rules =====
    match /developmentalSkills/{skillId} {
      allow read: if isSignedIn();
      allow write: if hasRole('admin');
    }
    
    // ===== Activities Rules =====
    match /activities/{activityId} {
      allow read: if isSignedIn();
      allow write: if hasRole('educator') || hasRole('admin'); 
    }
    
    // ===== Weekly Plans Rules =====
    match /weeklyPlans/{planId} {
      allow read: if isSignedIn() && (
        resource == null || 
        isChildData(resource.data) || 
        resource.data.userId == request.auth.uid ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow create: if isSignedIn() && (
        isChildData(request.resource.data) || 
        request.resource.data.userId == request.auth.uid ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow update: if isSignedIn() && (
        (isChildData(resource.data) && isChildData(request.resource.data)) || 
        resource.data.userId == request.auth.uid ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow delete: if isSignedIn() && (
        isChildData(resource.data) || 
        resource.data.userId == request.auth.uid ||
        hasRole('admin')
      );
    }
    
    // ===== Progress Records Rules =====
    match /progressRecords/{recordId} {
      allow read: if isSignedIn() && (
        resource == null || 
        isChildData(resource.data) || 
        hasFamilyAccess(resource.data.childId) ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow create: if isSignedIn() && (
        isChildData(request.resource.data) || 
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow update: if isSignedIn() && (
        (isChildData(resource.data) && isChildData(request.resource.data)) || 
        hasFamilyAccess(resource.data.childId) ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow delete: if isSignedIn() && (
        isChildData(resource.data) || 
        hasRole('admin')
      );
    }
    
    // ===== Activity Suggestions Rules =====
    match /activitySuggestions/{suggestionId} {
      allow read: if isSignedIn() && (
        resource == null || 
        isChildData(resource.data) || 
        hasFamilyAccess(resource.data.childId) ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow create: if hasRole('educator') || hasRole('admin');
      
      allow update: if isSignedIn() && (
        (isChildData(resource.data) && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasAny(['status', 'weeklyPlanId'])) || 
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow delete: if hasRole('admin');
    }
    
    // ===== Recommendation Logs Rules =====
    match /recommendationLogs/{logId} {
      allow read: if isSignedIn() && (
        resource == null || 
        isChildData(resource.data) || 
        hasFamilyAccess(resource.data.childId) ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow create: if hasRole('educator') || hasRole('admin');
      
      allow update: if isSignedIn() && (
        (isChildData(resource.data) && 
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['outcome', 'parentFeedback'])) || 
        hasRole('admin')
      );
      
      allow delete: if hasRole('admin');
    }
    
    // ===== Institutions Rules =====
    match /institutions/{institutionId} {
      allow read: if isSignedIn();
      allow create: if hasRole('admin');
      allow update: if hasRole('admin') || 
        (resource.data.administratorIds.hasAny([request.auth.uid]));
      allow delete: if hasRole('admin');
    }
    
    // ===== Classrooms Rules =====
    match /classrooms/{classroomId} {
      allow read: if isSignedIn();
      allow create: if hasRole('admin') || hasRole('educator');
      allow update: if hasRole('admin') || 
        (resource.data.educatorIds.hasAny([request.auth.uid]));
      allow delete: if hasRole('admin');
    }
    
    // ===== Classroom-Child Relationships Rules =====
    match /classroomChildren/{relationId} {
      allow read: if isSignedIn();
      allow create: if hasRole('educator') || hasRole('admin');
      allow update: if hasRole('educator') || hasRole('admin');
      allow delete: if hasRole('educator') || hasRole('admin');
    }
    
    // ===== Planned Activities Rules =====
    match /plannedActivities/{activityId} {
      allow read: if isSignedIn() && (
        resource == null || 
        isChildData(resource.data) || 
        hasFamilyAccess(resource.data.childId) ||
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow create: if isSignedIn() && (
        isChildData(request.resource.data) || 
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow update: if isSignedIn() && (
        (isChildData(resource.data) && isChildData(request.resource.data)) || 
        hasRole('educator') || 
        hasRole('admin')
      );
      
      allow delete: if isSignedIn() && (
        isChildData(resource.data) || 
        hasRole('admin')
      );
    }
    
    // ===== Messages Rules =====
    match /messages/{messageId} {
      allow read: if isSignedIn() && 
        (resource.data.recipientIds.hasAny([request.auth.uid]) || 
         resource.data.senderId == request.auth.uid || 
         hasRole('admin'));
                    
      allow create: if isSignedIn();
      
      allow update: if isSignedIn() && 
        (resource.data.recipientIds.hasAny([request.auth.uid]) || 
         resource.data.senderId == request.auth.uid || 
         hasRole('admin'));
                      
      allow delete: if hasRole('admin') || resource.data.senderId == request.auth.uid;
    }
    
    // ===== Materials Rules =====
    match /materials/{materialId} {
      allow read: if isSignedIn();
      allow create, update: if hasRole('admin');
      allow delete: if hasRole('admin');
    }
    
    // ===== User Materials Rules =====
    match /userMaterials/{userMaterialId} {
      allow read: if isSignedIn() && 
        (resource.data.userId == request.auth.uid ||
         hasRole('admin'));
      
      allow create: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid;
      
      allow update: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      allow delete: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
    }
  }
}