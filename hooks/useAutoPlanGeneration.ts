import { useEffect, useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { getUserChildren } from '@/lib/dataService';
import { doc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';
import { db } from '@/lib/firebase';

/**
 * Hook to handle automatic plan generation when a user visits the dashboard
 */
export function useAutoPlanGeneration() {
  const { currentUser } = useAuth();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPlanIds, setGeneratedPlanIds] = useState<string[]>([]);
  
  useEffect(() => {
    // Skip if no user is logged in
    if (!currentUser?.uid) return;
    
    // Function to check if auto-generation is needed
    const checkAndGeneratePlans = async () => {
      try {
        // Skip if already generating
        if (isGenerating) return;
        
        // Check if we've already generated plans recently
        try {
          const userRef = doc(db, 'users', currentUser.uid);
          const userDoc = await getDoc(userRef);
          
          if (userDoc.exists()) {
            const userData = userDoc.data();
            const lastAutoGenerated = userData.lastAutoPlansGenerated;
            
            // If we've generated plans in the last 24 hours, skip
            if (lastAutoGenerated) {
              const lastGenTimestamp = lastAutoGenerated.toDate ? 
                lastAutoGenerated.toDate() : new Date(lastAutoGenerated);
              
              const daysSinceLastGen = Math.floor(
                (Date.now() - lastGenTimestamp.getTime()) / (1000 * 60 * 60 * 24)
              );
              
              if (daysSinceLastGen < 1) {
                console.log('Auto-generation skipped - generated within last 24 hours');
                return;
              }
            }
          }
        } catch (checkError) {
          console.error('Error checking last auto-generation:', checkError);
          // Continue even if check fails
        }
        
        setIsGenerating(true);
        
        // Get all children of the current user
        const children = await getUserChildren(currentUser.uid);
        
        if (children.length === 0) {
          console.log('No children found, skipping auto-generation');
          setIsGenerating(false);
          return;
        }
        
        // For each child, auto-generate plans
        const generatedIds: string[] = [];
        const { autoGeneratePlans, evolvePlansBasedOnObservations } = await import('@/lib/planGenerator');
        
        for (const child of children) {
          if (!child.id) continue;
          
          console.log(`Auto-generating plans for child: ${child.id}`);
          
          // First check if plans should evolve based on observations
          await evolvePlansBasedOnObservations(child.id, currentUser.uid);
          
          // Then generate any missing plans
          const childPlanIds = await autoGeneratePlans(child.id, currentUser.uid);
          generatedIds.push(...childPlanIds);
        }
        
        // Update last auto-generation timestamp
        const userRef = doc(db, 'users', currentUser.uid);
        await updateDoc(userRef, {
          lastAutoPlansGenerated: serverTimestamp()
        });
        
        setGeneratedPlanIds(generatedIds);
        console.log(`Auto-generated ${generatedIds.length} plans`);
      } catch (error) {
        console.error('Error in auto plan generation:', error);
      } finally {
        setIsGenerating(false);
      }
    };
    
    // Run the auto-generation check
    checkAndGeneratePlans();
  }, [currentUser]);
  
  return { isGenerating, generatedPlanIds };
} 